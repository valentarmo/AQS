Description: Create a Data Lake with an automated ETL

Parameters:
  S3BucketPrefix:
    Description: A word to prefix names with. Aimed mainly to make bucket names unique.
    Type: String
    AllowedPattern: "[a-z]+"
    ConstraintDescription: Malformed input-parameter. Prefix must match the pattern [a-z]+

Resources:
  S3Glue:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [!Ref S3BucketPrefix, air-quality-glue]]   

  S3Raw:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [!Ref S3BucketPrefix, air-quality-raw]]

  S3Processed:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [!Ref S3BucketPrefix, air-quality-processed]]

  S3Athena:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [!Ref S3BucketPrefix, air-quality-athena-output]]

  S3Scripts:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [!Ref S3BucketPrefix, air-quality-etl-scripts]]

  GlueRawBucketCrawler:
    Type: "AWS::Glue::Crawler"
    Properties:
      DatabaseName: !Ref GlueDatabase
      Name: AQSRawDataCrawler
      Role: !GetAtt GlueRole.Arn
      Targets:
        S3Targets:
          - Path: !Ref S3Raw

  GlueProcessedBucketCrawler:
    Type: "AWS::Glue::Crawler"
    Properties:
      DatabaseName: !Ref GlueDatabase
      Name: AQSProcessedDataCrawler
      Role: !GetAtt GlueRole.Arn
      Targets:
        S3Targets:
          - Path: !Ref S3Processed

  GlueDatabase:
    Type: "AWS::Glue::Database"
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: aqs_glue_database
        Description: GlueCatalogDatabase

  GlueJob:
    Type: "AWS::Glue::Job"
    Properties:
      Command:
        Name: glueetl
        PythonVersion: '3'
        ScriptLocation: !Join ["", [s3://, !Ref S3Scripts, /, AirQualityToColumnarFormatHourly.py]]
      Name: AQSTransformToParquet
      DefaultArguments:
        "--TempDir": !Join ["", [s3://, !Ref S3Glue]]
        "--source_database": !Ref GlueDatabase
        "--source_table_name": !Join ["_", [!Ref S3BucketPrefix, air_quality_raw]]
        "--data_target": !Join ["", [s3://, !Ref S3Processed, /]]
      Role: !GetAtt GlueRole.Arn
      Description: ETL
      GlueVersion: "2.0"
      MaxRetries: 0

  AthenaWorkGroup:
    Type: "AWS::Athena::WorkGroup"
    Properties:
      Name: AQSWorkGroup
      State: ENABLED
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Join ["", [s3://, !Ref S3Athena]]

  FirehoseDeliveryStream:
    Type: "AWS::KinesisFirehose::DeliveryStream"
    Properties:
      DeliveryStreamName: AQSFirehoseDeliveryStream
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt S3Raw.Arn
        ErrorOutputPrefix: error=!{firehose:error-output-type}/!{timestamp:yyyy/MM/dd}
        Prefix: year=!{timestamp:YYYY}/month=!{timestamp:M}/day=!{timestamp:d}/hour=!{timestamp:H}/
        RoleARN: !GetAtt FirehoseRole.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1

  DeliveryStreamSSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: Firehose Delivery Stream Name 
      Name: AQSDeliveryStreamName
      Type: String
      Value: !Ref FirehoseDeliveryStream

  StepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      StateMachineName: AQSStateMachine
      DefinitionString:
        !Join
          - ' '
          - - '{'
            - '"StartAt": "Load New Partitions Raw",'
            - '"States": {'
            - '"Load New Partitions Raw": {'
            - '"Type": "Task",'
            - '"Resource": "arn:aws:states:::athena:startQueryExecution.sync",'
            - '"Parameters": {'
            - !Join ['', ['"QueryString": "MSCK REPAIR TABLE ', !Ref GlueDatabase, '.', !Join ["_", [!Ref S3BucketPrefix, air_quality_raw]], ';",']]
            - '"WorkGroup": "primary",'
            - '"ResultConfiguration": {'
            - !Join ['', ['"OutputLocation": "', !Join ["", [s3://, !Ref S3Athena]], '"']]
            - '}'
            - '},'
            - '"Next": "Start Glue Job"'
            - '},'
            - '"Start Glue Job": {'
            - '"Type": "Task",'
            - '"Resource": "arn:aws:states:::glue:startJobRun.sync",'
            - '"Parameters": {'
            - !Join ['', ['"JobName": "', !Ref GlueJob, '"']]
            - '},'
            - '"Next": "Load New Partitions Columnar"'
            - '},'
            - '"Load New Partitions Columnar": {'
            - '"Type": "Task",'
            - '"Resource": "arn:aws:states:::athena:startQueryExecution.sync",'
            - '"Parameters": {'
            - !Join ['', ['"QueryString": "MSCK REPAIR TABLE ', !Ref GlueDatabase, '.', !Join ["_", [!Ref S3BucketPrefix, air_quality_processed]], ';",']]
            - '"WorkGroup": "primary",'
            - '"ResultConfiguration": {'
            - !Join ['', ['"OutputLocation": "', !Join ["", [s3://, !Ref S3Athena]], '"']]
            - '}'
            - '},'
            - '"End": true'
            - '}'
            - '}'
            - '}'

  CloudWatchEvent:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Run the ETL step function every hour
      Name: AQSHourlyEventRule
      RoleArn: !GetAtt EventsRole.Arn
      ScheduleExpression: cron(0 0/1 ? * * *)
      State: DISABLED
      Targets:
        - Arn: !GetAtt StepFunction.Arn
          Id: !GetAtt StepFunction.Name
          RoleArn: !GetAtt EventsRole.Arn
          RetryPolicy:
            MaximumRetryAttempts: 1
            MaximumEventAgeInSeconds: 600

  GlueRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: AQSGlueRole
      ManagedPolicyArns: [ "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole" ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - "sts:AssumeRole"

  FirehoseRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: AQSFirehoseRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - "sts:AssumeRole"

  StepFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: AQSStepFunctionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"

  EventsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: AQSEventsRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - "sts:AssumeRole"

  GluePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AQSGlueS3AccessPolicy
      Roles: [!Ref GlueRole]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:DeleteObject"
              - "s3:ListAllMyBuckets"
              - "s3:ListBucket"
              - "s3:CreateBucket"
              - "s3:DeleteBucket"
            Resource: "*"

  FirehosePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AQSFirehosePolicy
      Roles: [!Ref FirehoseRole]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource: 
              - !GetAtt S3Raw.Arn
              - !Join ["", [!GetAtt S3Raw.Arn, "/*"]]
          - Effect: Allow
            Action:
              - "logs:PutLogEvents"
            Resource: "*"
          - Effect: Allow
            Action:
              - "Kinesis:DescribeStream"
              - "Kinesis:GetShardIterator"
              - "Kinesis:GetRecords"
              - "Kinesis:ListShards"
            Resource: "*"

  StepFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AQSStepFunctionPolicy
      Roles: [!Ref StepFunctionRole]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "glue:StartJobRun"
              - "glue:GetJobRun"
              - "glue:GetJobRuns"
              - "glue:BatchStopJobRun"
            Resource: "*"
          - Effect: Allow
            Action:
              - "athena:startQueryExecution"
              - "athena:stopQueryExecution"
              - "athena:getQueryExecution"
              - "athena:getDataCatalog"
            Resource: "*"
          - Effect: Allow
            Action:
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:ListMultipartUploadParts"
              - "s3:AbortMultipartUpload"
              - "s3:CreateBucket"
              - "s3:PutObject"
            Resource: 
              - !GetAtt S3Processed.Arn
              - !GetAtt S3Athena.Arn
          - Effect: Allow
            Action:
              - "glue:CreateDatabase"
              - "glue:GetDatabase"
              - "glue:GetDatabases"
              - "glue:UpdateDatabase"
              - "glue:DeleteDatabase"
              - "glue:CreateTable"
              - "glue:UpdateTable"
              - "glue:GetTable"
              - "glue:GetTables"
              - "glue:DeleteTable"
              - "glue:BatchDeleteTable"
              - "glue:BatchCreatePartition"
              - "glue:CreatePartition"
              - "glue:GetPartitions"
              - "glue:BatchGetPartition"
              - "glue:DeletePartition"
              - "glue:BatchDeletePartition"
            Resource: "*"
          - Effect: Allow
            Action:
              - "lakeformation:GetDataAccess"
            Resource: "*"

  EventsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AQSEventsPolicy
      Roles: [!Ref EventsRole]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "states:StartExecution"
            Resource: !GetAtt StepFunction.Arn

Outputs:
  ScriptsBucketName:
    Description: Scripts Bucket Name
    Value: !Ref S3Scripts
